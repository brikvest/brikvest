import { useState } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Users, Share2, Target, TrendingUp, Clock, Plus, Eye } from "lucide-react";
import type { Property, InvestmentGroup, GroupMembership, InsertInvestmentGroup, InsertGroupMembership } from "@shared/schema";

export default function Groups() {
  const { toast } = useToast();
  
  // Modal states
  const [createGroupModalOpen, setCreateGroupModalOpen] = useState(false);
  const [joinGroupModalOpen, setJoinGroupModalOpen] = useState(false);
  const [groupDetailModalOpen, setGroupDetailModalOpen] = useState(false);
  const [selectedGroup, setSelectedGroup] = useState<InvestmentGroup | null>(null);
  
  // Form states
  const [createGroupForm, setCreateGroupForm] = useState({
    name: "",
    description: "",
    creatorEmail: "",
    targetAmount: "",
    maxMembers: "10",
    propertyId: "",
    isPublic: true
  });

  const [joinGroupForm, setJoinGroupForm] = useState({
    memberName: "",
    memberEmail: "",
    memberPhone: "",
    contributionAmount: "",
    inviteCode: ""
  });

  // Fetch investment groups
  const { data: groups = [], isLoading: groupsLoading } = useQuery<InvestmentGroup[]>({
    queryKey: ["/api/groups"],
  });

  // Fetch properties for group creation
  const { data: properties = [] } = useQuery<Property[]>({
    queryKey: ["/api/properties"],
  });

  // Create group mutation
  const createGroupMutation = useMutation({
    mutationFn: async (data: InsertInvestmentGroup) => {
      return apiRequest("/api/groups", {
        method: "POST",
        body: JSON.stringify(data),
        headers: {
          "Content-Type": "application/json",
        },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/groups"] });
      setCreateGroupModalOpen(false);
      setCreateGroupForm({
        name: "",
        description: "",
        creatorEmail: "",
        targetAmount: "",
        maxMembers: "10",
        propertyId: "",
        isPublic: true
      });
      toast({
        title: "Success!",
        description: "Investment group created successfully.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to create investment group. Please try again.",
        variant: "destructive",
      });
    },
  });

  // Join group mutation
  const joinGroupMutation = useMutation({
    mutationFn: async ({ groupId, data }: { groupId: number; data: InsertGroupMembership }) => {
      return apiRequest(`/api/groups/${groupId}/join`, {
        method: "POST",
        body: JSON.stringify(data),
        headers: {
          "Content-Type": "application/json",
        },
      });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/groups"] });
      setJoinGroupModalOpen(false);
      setJoinGroupForm({
        memberName: "",
        memberEmail: "",
        memberPhone: "",
        contributionAmount: "",
        inviteCode: ""
      });
      toast({
        title: "Success!",
        description: "Successfully joined the investment group.",
      });
    },
    onError: (error) => {
      toast({
        title: "Error",
        description: "Failed to join investment group. Please check your details.",
        variant: "destructive",
      });
    },
  });

  const handleCreateGroup = (e: React.FormEvent) => {
    e.preventDefault();
    
    const groupData: InsertInvestmentGroup = {
      name: createGroupForm.name,
      description: createGroupForm.description,
      creatorEmail: createGroupForm.creatorEmail,
      targetAmount: parseInt(createGroupForm.targetAmount),
      maxMembers: parseInt(createGroupForm.maxMembers),
      propertyId: createGroupForm.propertyId ? parseInt(createGroupForm.propertyId) : undefined,
      isPublic: createGroupForm.isPublic,
      inviteCode: "" // Will be generated by server
    };

    createGroupMutation.mutate(groupData);
  };

  const handleJoinGroup = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!selectedGroup) return;

    const membershipData: InsertGroupMembership = {
      groupId: selectedGroup.id,
      memberName: joinGroupForm.memberName,
      memberEmail: joinGroupForm.memberEmail,
      memberPhone: joinGroupForm.memberPhone,
      contributionAmount: parseInt(joinGroupForm.contributionAmount)
    };

    joinGroupMutation.mutate({ groupId: selectedGroup.id, data: membershipData });
  };

  const openGroupDetail = (group: InvestmentGroup) => {
    setSelectedGroup(group);
    setGroupDetailModalOpen(true);
  };

  const openJoinModal = (group: InvestmentGroup) => {
    setSelectedGroup(group);
    setJoinGroupModalOpen(true);
  };

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("en-NG", {
      style: "currency",
      currency: "NGN",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'closed':
        return 'bg-gray-100 text-gray-800 border-gray-200';
      case 'investing':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'completed':
        return 'bg-purple-100 text-purple-800 border-purple-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  return (
    <div className="min-h-screen bg-slate-50">
      {/* Header */}
      <section className="bg-white shadow-sm border-b border-slate-200 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-slate-900">Investment Groups</h1>
              <p className="text-slate-600 mt-2">Join forces with other investors to access larger opportunities</p>
            </div>
            <Button 
              onClick={() => setCreateGroupModalOpen(true)}
              className="bg-blue-600 hover:bg-blue-700 text-white"
            >
              <Plus className="w-4 h-4 mr-2" />
              Create Group
            </Button>
          </div>
        </div>
      </section>

      {/* Groups Grid */}
      <section className="py-12">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          {groupsLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, i) => (
                <Card key={i} className="animate-pulse">
                  <CardContent className="p-6">
                    <div className="h-4 bg-slate-200 rounded mb-2" />
                    <div className="h-3 bg-slate-200 rounded mb-4 w-2/3" />
                    <div className="space-y-2">
                      <div className="h-3 bg-slate-200 rounded" />
                      <div className="h-3 bg-slate-200 rounded" />
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {groups.map((group) => (
                <Card key={group.id} className="hover:shadow-lg transition-shadow">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-lg">{group.name}</CardTitle>
                      <span className={`px-2 py-1 text-xs font-medium rounded-full border ${getStatusColor(group.status)}`}>
                        {group.status.charAt(0).toUpperCase() + group.status.slice(1)}
                      </span>
                    </div>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <p className="text-slate-600 text-sm">{group.description}</p>
                    
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="flex items-center">
                        <Target className="w-4 h-4 mr-2 text-blue-600" />
                        <div>
                          <div className="font-medium">Target</div>
                          <div className="text-slate-600">{formatCurrency(group.targetAmount)}</div>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <TrendingUp className="w-4 h-4 mr-2 text-green-600" />
                        <div>
                          <div className="font-medium">Raised</div>
                          <div className="text-slate-600">{formatCurrency(group.currentAmount)}</div>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <Users className="w-4 h-4 mr-2 text-purple-600" />
                        <div>
                          <div className="font-medium">Members</div>
                          <div className="text-slate-600">{group.currentMembers}/{group.maxMembers}</div>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <Clock className="w-4 h-4 mr-2 text-orange-600" />
                        <div>
                          <div className="font-medium">Created</div>
                          <div className="text-slate-600">{new Date(group.createdAt).toLocaleDateString()}</div>
                        </div>
                      </div>
                    </div>

                    {/* Progress Bar */}
                    <div>
                      <div className="flex justify-between items-center mb-2">
                        <span className="text-sm text-slate-600">Progress</span>
                        <span className="text-sm font-medium">
                          {Math.round((group.currentAmount / group.targetAmount) * 100)}%
                        </span>
                      </div>
                      <div className="w-full bg-slate-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                          style={{ width: `${Math.min((group.currentAmount / group.targetAmount) * 100, 100)}%` }}
                        />
                      </div>
                    </div>

                    <div className="flex gap-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => openGroupDetail(group)}
                        className="flex-1"
                      >
                        <Eye className="w-4 h-4 mr-1" />
                        View
                      </Button>
                      {group.status === 'open' && group.currentMembers < group.maxMembers && (
                        <Button
                          size="sm"
                          onClick={() => openJoinModal(group)}
                          className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
                        >
                          Join Group
                        </Button>
                      )}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {groups.length === 0 && !groupsLoading && (
            <div className="text-center py-12">
              <Users className="w-16 h-16 text-slate-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-slate-900 mb-2">No Investment Groups Yet</h3>
              <p className="text-slate-600 mb-6">Be the first to create an investment group and start collaborating!</p>
              <Button 
                onClick={() => setCreateGroupModalOpen(true)}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                Create First Group
              </Button>
            </div>
          )}
        </div>
      </section>

      {/* Create Group Modal */}
      <Dialog open={createGroupModalOpen} onOpenChange={setCreateGroupModalOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Create Investment Group</DialogTitle>
            <DialogDescription>
              Start a new investment group to pool resources with other investors.
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleCreateGroup} className="space-y-4">
            <div>
              <Label htmlFor="groupName">Group Name</Label>
              <Input
                id="groupName"
                value={createGroupForm.name}
                onChange={(e) => setCreateGroupForm(prev => ({ ...prev, name: e.target.value }))}
                placeholder="Lagos Property Investors"
                required
              />
            </div>
            
            <div>
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                value={createGroupForm.description}
                onChange={(e) => setCreateGroupForm(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Describe your investment group and goals..."
                required
              />
            </div>

            <div>
              <Label htmlFor="creatorEmail">Your Email</Label>
              <Input
                id="creatorEmail"
                type="email"
                value={createGroupForm.creatorEmail}
                onChange={(e) => setCreateGroupForm(prev => ({ ...prev, creatorEmail: e.target.value }))}
                placeholder="your@email.com"
                required
              />
            </div>

            <div>
              <Label htmlFor="targetAmount">Target Amount (₦)</Label>
              <Input
                id="targetAmount"
                type="number"
                value={createGroupForm.targetAmount}
                onChange={(e) => setCreateGroupForm(prev => ({ ...prev, targetAmount: e.target.value }))}
                placeholder="5000000"
                required
              />
            </div>

            <div>
              <Label htmlFor="maxMembers">Maximum Members</Label>
              <Select 
                value={createGroupForm.maxMembers} 
                onValueChange={(value) => setCreateGroupForm(prev => ({ ...prev, maxMembers: value }))}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {[5, 10, 15, 20, 25].map(num => (
                    <SelectItem key={num} value={num.toString()}>{num} members</SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="property">Target Property (Optional)</Label>
              <Select 
                value={createGroupForm.propertyId} 
                onValueChange={(value) => setCreateGroupForm(prev => ({ ...prev, propertyId: value }))}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select a property" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="">No specific property</SelectItem>
                  {properties.map(property => (
                    <SelectItem key={property.id} value={property.id.toString()}>
                      {property.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex gap-3">
              <Button
                type="button"
                variant="outline"
                onClick={() => setCreateGroupModalOpen(false)}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={createGroupMutation.isPending}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
              >
                {createGroupMutation.isPending ? "Creating..." : "Create Group"}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Join Group Modal */}
      <Dialog open={joinGroupModalOpen} onOpenChange={setJoinGroupModalOpen}>
        <DialogContent className="max-w-md">
          <DialogHeader>
            <DialogTitle>Join Investment Group</DialogTitle>
            <DialogDescription>
              {selectedGroup ? `Join "${selectedGroup.name}" and start investing together.` : "Join an investment group"}
            </DialogDescription>
          </DialogHeader>
          <form onSubmit={handleJoinGroup} className="space-y-4">
            <div>
              <Label htmlFor="memberName">Full Name</Label>
              <Input
                id="memberName"
                value={joinGroupForm.memberName}
                onChange={(e) => setJoinGroupForm(prev => ({ ...prev, memberName: e.target.value }))}
                placeholder="John Doe"
                required
              />
            </div>

            <div>
              <Label htmlFor="memberEmail">Email</Label>
              <Input
                id="memberEmail"
                type="email"
                value={joinGroupForm.memberEmail}
                onChange={(e) => setJoinGroupForm(prev => ({ ...prev, memberEmail: e.target.value }))}
                placeholder="john@example.com"
                required
              />
            </div>

            <div>
              <Label htmlFor="memberPhone">Phone Number</Label>
              <Input
                id="memberPhone"
                type="tel"
                value={joinGroupForm.memberPhone}
                onChange={(e) => setJoinGroupForm(prev => ({ ...prev, memberPhone: e.target.value }))}
                placeholder="+234 800 000 0000"
                required
              />
            </div>

            <div>
              <Label htmlFor="contributionAmount">Contribution Amount (₦)</Label>
              <Input
                id="contributionAmount"
                type="number"
                value={joinGroupForm.contributionAmount}
                onChange={(e) => setJoinGroupForm(prev => ({ ...prev, contributionAmount: e.target.value }))}
                placeholder="1000000"
                required
              />
            </div>

            <div className="flex gap-3">
              <Button
                type="button"
                variant="outline"
                onClick={() => setJoinGroupModalOpen(false)}
                className="flex-1"
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={joinGroupMutation.isPending}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
              >
                {joinGroupMutation.isPending ? "Joining..." : "Join Group"}
              </Button>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Group Detail Modal */}
      <Dialog open={groupDetailModalOpen} onOpenChange={setGroupDetailModalOpen}>
        <DialogContent className="max-w-2xl">
          <DialogHeader>
            <DialogTitle>{selectedGroup?.name}</DialogTitle>
            <DialogDescription>
              Detailed information about this investment group
            </DialogDescription>
          </DialogHeader>
          {selectedGroup && (
            <div className="space-y-6">
              <div>
                <h4 className="font-medium mb-2">Description</h4>
                <p className="text-slate-600">{selectedGroup.description}</p>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="font-medium mb-2">Target Amount</h4>
                  <p className="text-2xl font-bold text-blue-600">{formatCurrency(selectedGroup.targetAmount)}</p>
                </div>
                <div>
                  <h4 className="font-medium mb-2">Amount Raised</h4>
                  <p className="text-2xl font-bold text-green-600">{formatCurrency(selectedGroup.currentAmount)}</p>
                </div>
              </div>

              <div>
                <h4 className="font-medium mb-2">Progress</h4>
                <div className="w-full bg-slate-200 rounded-full h-3">
                  <div 
                    className="bg-blue-600 h-3 rounded-full transition-all duration-300" 
                    style={{ width: `${Math.min((selectedGroup.currentAmount / selectedGroup.targetAmount) * 100, 100)}%` }}
                  />
                </div>
                <p className="text-sm text-slate-600 mt-1">
                  {Math.round((selectedGroup.currentAmount / selectedGroup.targetAmount) * 100)}% complete
                </p>
              </div>

              <div className="grid grid-cols-3 gap-4 text-center">
                <div>
                  <p className="text-2xl font-bold">{selectedGroup.currentMembers}</p>
                  <p className="text-sm text-slate-600">Current Members</p>
                </div>
                <div>
                  <p className="text-2xl font-bold">{selectedGroup.maxMembers}</p>
                  <p className="text-sm text-slate-600">Max Members</p>
                </div>
                <div>
                  <p className="text-2xl font-bold">{selectedGroup.maxMembers - selectedGroup.currentMembers}</p>
                  <p className="text-sm text-slate-600">Spots Left</p>
                </div>
              </div>

              <div className="flex items-center gap-2">
                <Share2 className="w-4 h-4" />
                <span className="text-sm font-medium">Invite Code:</span>
                <code className="bg-slate-100 px-2 py-1 rounded text-sm">{selectedGroup.inviteCode}</code>
              </div>

              {selectedGroup.status === 'open' && selectedGroup.currentMembers < selectedGroup.maxMembers && (
                <Button
                  onClick={() => {
                    setGroupDetailModalOpen(false);
                    openJoinModal(selectedGroup);
                  }}
                  className="w-full bg-blue-600 hover:bg-blue-700 text-white"
                >
                  Join This Group
                </Button>
              )}
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}